import os
from flask import Flask, request, jsonify
import telegram
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
import psycopg2
from psycopg2.extras import DictCursor
from datetime import datetime, timedelta
import nest_asyncio

nest_asyncio.apply()

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_IDS = set(int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit())
LICENSE_TYPES = {
    'month': {'days': 30, 'name': '–ú–µ—Å—è—Ü'},
    'year': {'days': 365, 'name': '–ì–æ–¥'},
    'lifetime': {'days': None, 'name': '–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ'}
}


app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS licenses (
            id SERIAL PRIMARY KEY,
            key_value TEXT UNIQUE NOT NULL,
            license_type TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def generate_key():
    import random, string
    chars = string.ascii_uppercase + string.digits
    return f"{''.join(random.choices(chars, k=2))}-" \
           f"{''.join(random.choices(chars, k=6))}-" \
           f"{''.join(random.choices(chars, k=4))}-" \
           f"{''.join(random.choices(chars, k=4))}"

# --- Flask endpoints ---
@app.route('/api/validate', methods=['POST'])
def api_validate():
    data = request.get_json() or {}
    key = data.get('key', '').strip().upper()
    if not key:
        return jsonify({'valid': False, 'reason': '–ö–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400
    conn = get_db_connection()
    with conn.cursor(cursor_factory=DictCursor) as cur:
        cur.execute("SELECT key_value, license_type, expires_at, is_active FROM licenses WHERE key_value = %s", (key,))
        row = cur.fetchone()
    conn.close()
    if not row:
        return jsonify({'valid': False, 'reason': '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    banned = not row['is_active']
    expired = row['expires_at'] and row['expires_at'] < datetime.utcnow()
    valid = row['is_active'] and not expired
    return jsonify({
        'valid': valid,
        'banned': banned,
        'expired': expired,
        'type': row['license_type'],
        'expires_at': row['expires_at'].isoformat() if row['expires_at'] else None,
        'reason': None if valid else ('–ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if banned else '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫' if expired else '–û—à–∏–±–∫–∞')
    })

@app.route('/generate', methods=['POST'])
def generate():
    data = request.get_json() or {}
    lictype = data.get('type')
    if lictype not in LICENSE_TYPES:
        return jsonify({'error': 'invalid license type'}), 400
    key = generate_key()
    created_at = datetime.utcnow()
    days = LICENSE_TYPES[lictype]['days']
    expires_at = None if days is None else created_at + timedelta(days=days)
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("INSERT INTO licenses (key_value, license_type, created_at, expires_at, is_active) VALUES (%s, %s, %s, %s, TRUE)",
                    (key, lictype, created_at, expires_at))
        conn.commit()
    conn.close()
    return jsonify({
        'key': key,
        'type': lictype,
        'expires': expires_at.isoformat() + 'Z' if expires_at else None
    })

@app.route('/verify', methods=['POST'])
def verify():
    data = request.get_json() or {}
    key = data.get('key', '').strip().upper()
    if not key:
        return jsonify({'valid': False, 'reason': '–ö–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400
    conn = get_db_connection()
    with conn.cursor(cursor_factory=DictCursor) as cur:
        cur.execute("SELECT key_value, license_type, expires_at, is_active FROM licenses WHERE key_value = %s", (key,))
        row = cur.fetchone()
    conn.close()
    if not row:
        return jsonify({'valid': False, 'reason': '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    if not row['is_active']:
        return jsonify({'valid': False, 'reason': '–ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}), 403
    if row['expires_at'] and row['expires_at'] < datetime.utcnow():
        return jsonify({'valid': False, 'reason': '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫'}), 403
    days_left = None
    if row['expires_at']:
        days_left = (row['expires_at'] - datetime.utcnow()).days
    return jsonify({'valid': True, 'type': row['license_type'], 'days_left': days_left})

@app.route('/ping', methods=['GET'])
def ping():
    return "pong"

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = telegram.Update.de_json(request.get_json(force=True), application.bot)
    application.process_update(update)
    return "ok"

# --- Telegram bot handlers ---
def admin_only(update: Update):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = user.full_name
    username = user.username
    mention = f"@{username}" if username else name
    if user.id in ADMIN_IDS:
        text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {mention}!\n\n"
            "üõ†Ô∏è –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üîë /generate <lictype> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á\n"
            "‚õî /ban <key> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á\n"
            "üìã /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏\n"
            "üîç /verify <key> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"
        )
    else:
        text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {mention}!\n\n"
            "üí∏ –ù–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:\n"
            "‚Ä¢ üìÖ –ú–µ—Å—è—Ü ‚Äî 99—Ä\n"
            "‚Ä¢ üóìÔ∏è –ì–æ–¥ ‚Äî 349—Ä\n"
            "‚Ä¢ ‚ôæÔ∏è –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ ‚Äî 849—Ä\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @role69, @fuckgrazie\n"
            "–û–ø–ª–∞—Ç–∞: Cryptobot, TG Stars üí≥"
        )
    update.message.reply_text(text)

async def tg_generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_only(update): return
    args = context.args
    if not args or args[0] not in LICENSE_TYPES:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /generate <month|year|lifetime>")
        return
    license_type = args[0]
    key = generate_key()
    created_at = datetime.utcnow()
    days = LICENSE_TYPES[license_type]['days']
    expires_at = None if days is None else created_at + timedelta(days=days)
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("INSERT INTO licenses (key_value, license_type, created_at, expires_at, is_active) VALUES (%s, %s, %s, %s, TRUE)",
                    (key, license_type, created_at, expires_at))
        conn.commit()
    conn.close()
    await update.message.reply_text(f"–ö–ª—é—á: {key}\n–¢–∏–ø: {LICENSE_TYPES[license_type]['name']}\n–°—Ä–æ–∫: {expires_at.strftime('%d.%m.%Y %H:%M') if expires_at else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}")

async def tg_ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_only(update): return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <key>")
        return
    key = args[0]
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("UPDATE licenses SET is_active = FALSE WHERE key_value = %s", (key,))
        conn.commit()
    conn.close()
    await update.message.reply_text(f"–ö–ª—é—á {key} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def tg_list_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_only(update): return
    conn = get_db_connection()
    with conn.cursor(cursor_factory=DictCursor) as cur:
        cur.execute("SELECT key_value, license_type, expires_at, is_active FROM licenses ORDER BY created_at DESC")
        rows = cur.fetchall()
    conn.close()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∫–ª—é—á–µ–π.")
        return
    text = '\n'.join([
        f"{row['key_value']}: {LICENSE_TYPES[row['license_type']]['name']}, –¥–æ {row['expires_at'] if row['expires_at'] else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}, {'OK' if row['is_active'] else 'BAN'}" for row in rows
    ])
    await update.message.reply_text(text)

async def tg_verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not admin_only(update): return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /verify <key>")
        return
    key = args[0]
    conn = get_db_connection()
    with conn.cursor(cursor_factory=DictCursor) as cur:
        cur.execute("SELECT key_value, license_type, expires_at, is_active FROM licenses WHERE key_value = %s", (key,))
        row = cur.fetchone()
    conn.close()
    if not row:
        await update.message.reply_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    status = 'OK' if row['is_active'] else 'BAN'
    await update.message.reply_text(f"–ö–ª—é—á: {row['key_value']}\n–¢–∏–ø: {LICENSE_TYPES[row['license_type']]['name']}\n–°—Ç–∞—Ç—É—Å: {status}\n–°—Ä–æ–∫: {row['expires_at'] if row['expires_at'] else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}")

@app.route('/')
def index():
    return 'License Server & Telegram Bot is running.'

if __name__ == "__main__":
    init_db()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", tg_generate))
    application.add_handler(CommandHandler("ban", tg_ban))
    application.add_handler(CommandHandler("list", tg_list_keys))
    application.add_handler(CommandHandler("verify", tg_verify))
    WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    application.bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
